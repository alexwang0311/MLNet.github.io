@page "/"

@using System.Runtime.InteropServices
@using Microsoft.JSInterop
@using System.Text
@using BlazorTypewriter

@inject IJSRuntime JS

<PageTitle>WASM-GPT</PageTitle>

<MudGrid Class="mt-2" Justify="Justify.Center">
    <MudItem xs="12" lg="6">
        <MudPaper Class="d-flex pa-4 flex-column flex-grow-1 gap-4" Height="80vh">
            <MudPaper id="scroll-area" Class="d-flex flex-column flex-grow-1 gap-4 overflow-y-scroll" Height="85%" Width="100%" Elevation="0" Outlined="false">
                @for (Int32 i = 0; i < startupMessages.Count; i++)
                {
                    Message message = startupMessages[i];
                    if (messages.Count == 0 && i == startupMessages.Count - 1)
                    {
                        <MudPaper Class="pa-4">
                            <MudText Typo="Typo.body1">
                                <Typewriter Builder="@(new TypewriterBuilder(defaultCharacterPause: 6).TypeString(message.text))" />
                                @if (message.from == "upload")
                                {
                                    <MudText Typo="Typo.body1">
                                        <input class="inputTarget" type="file" />
                                        <div id="result"></div>
                                    </MudText>
                                }
                            </MudText>
                        </MudPaper>
                    }
                    else
                    {
                        if(message.from == "link")
                        {
                            <MudPaper Class="pa-4">
                                <MudText Typo="Typo.body1">
                                    To start, please make sure you are using a modern browser and have a ggml-compatible gpt-2 model on your local computer. You can download one from 
                                    <MudLink Href="https://huggingface.co/ggerganov/ggml/tree/main" Target="_blank">https://huggingface.co/ggerganov/ggml/tree/main</MudLink>
                                    .
                                </MudText>
                            </MudPaper>
                        }
                        else if(message.from == "upload")
                        {
                            <MudPaper Class="pa-4">
                                <MudText Typo="Typo.body1">
                                    Model has been loaded. If you want to use a different model, please refresh the site.
                                </MudText>
                            </MudPaper>
                        }
                        else
                        {
                            <MudPaper Class="pa-4">
                                <MudText Typo="Typo.body1">
                                    @message.text
                                </MudText>
                            </MudPaper>
                        }
                    }
                }

                @for(Int32 i = 0; i < messages.Count; i++)
                {
                    Message message = messages[i];
                    if(message.from == "user")
                    {
                        <MudPaper Class="pa-4">
                            <MudText Typo="Typo.body1">@message.text</MudText>
                        </MudPaper>
                    }
                    else
                    {
                        if(message.text is null)
                        {
                            <MudPaper Class="pa-4">
                                <MudText Typo="Typo.body1">
                                    <Typewriter Builder="@gptIsThinkingMessage" />
                                </MudText>
                            </MudPaper>
                        }
                        else
                        {
                            if(i == messages.Count - 1)
                            {
                                <MudPaper Class="pa-4">
                                    <MudText Typo="Typo.body1">
                                        <Typewriter Builder="@(new TypewriterBuilder(defaultCharacterPause: 6).TypeString(message.text))" />
                                    </MudText>
                                </MudPaper>
                            }
                            else
                            {
                                <MudPaper Class="pa-4">
                                    <MudText Typo="Typo.body1">
                                        @message.text
                                    </MudText>
                                </MudPaper>
                            }
                        }
                    }
                }
            </MudPaper>
            <MudTextField @bind-Value="input" Disabled="@gptIsThinking" Class="align-self-end" FullWidth="true" T="string" Label="Enter your prompt" Variant="Variant.Outlined" Lines="3" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Send" OnAdornmentClick="@(() => EnterPrompt())" />
        </MudPaper>
    </MudItem>
</MudGrid>


@code {
    private struct Message
    {
        public String from;
        public String? text;
    }

    [DllImport("main", CallingConvention = CallingConvention.Cdecl)]
    static extern void gpt2_gen_text(string prompt, StringBuilder sb, int len);

    private Boolean gptIsThinking = false;

    private Boolean fileIsLinked = false;

    private String input { get; set; }

    private List<Message> messages = new();

    private List<Message> startupMessages = new();

    private TypewriterBuilder gptIsThinkingMessage = new TypewriterBuilder(defaultCharacterPause: 6)
        .TypeString("GPT is thinking...", 30);

    /*
    private async Task PeriodicAsync(Func<Task> action, TimeSpan interval,
    CancellationToken cancellationToken = default)
        {
        using PeriodicTimer timer = new(interval);
            while (true)
            {
            await action();
            await timer.WaitForNextTickAsync(cancellationToken);
    }
    }
    */

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Message greeting = new();
            greeting.from = "gpt";
            greeting.text = "This is a Blazor WASM app that runs a gpt-2 model entirely within your browser.";

            startupMessages.Add(greeting);
            StateHasChanged();
            await Task.Delay(1000);

            Message downloadModel2 = new();
            downloadModel2.from = "gpt";
            downloadModel2.text = "Please note that these neural network models aren't meant to be run in a browser environment, this is purely an exprimental demonstration of the potentials of Blazor WASM. The performance and quality of the results may not be optimal.";

            startupMessages.Add(downloadModel2);
            StateHasChanged();
            await Task.Delay(3000);

            Message downloadModel = new();
            downloadModel.from = "link";
            downloadModel.text = "To start, please make sure you are using a modern browser and have a ggml-compatible gpt-2 model on your local computer. You can download one from https://huggingface.co/ggerganov/ggml/tree/main.";

            startupMessages.Add(downloadModel);
            StateHasChanged();
            await Task.Delay(3000);

            Message upload = new();
            upload.from = "upload";
            upload.text = "Please upload your gpt-2 model: ";
            startupMessages.Add(upload);
            StateHasChanged();
            await Task.Delay(3000);

            var jsInProcess = (IJSInProcessRuntime)JS;
            await jsInProcess.InvokeVoidAsync("addInputFileEventListener");
        }
    }

    private async Task EnterPrompt()
    {
        if (String.IsNullOrEmpty(input))
        {
            return;
        }

        gptIsThinking = true;
        var jsInProcess = (IJSInProcessRuntime)JS;

        Message prompt = new();
        prompt.from = "user";
        prompt.text = input;
        messages.Add(prompt);
        input = "";
        StateHasChanged();
        await Task.Delay(1000);

        Message gptWaitingMessage = new();
        gptWaitingMessage.from = "gpt";
        gptWaitingMessage.text = null;
        messages.Add(gptWaitingMessage);
        StateHasChanged();
        await jsInProcess.InvokeVoidAsync("onPromptScrollToBottom").ConfigureAwait(false);
        await Task.Delay(1000);

        Int32 len = 1000;
        StringBuilder sb = new StringBuilder(len);
        await Task.Run(() => gpt2_gen_text(prompt.text, sb, len));
        Message gptResponse = new();
        gptResponse.from = "gpt";
        String response = sb.ToString();
        if(!(response.EndsWith('.') || response.EndsWith('!') || response.EndsWith('?')))
        {
            response = String.Join(".", response.Split(new[] { '.' }, StringSplitOptions.RemoveEmptyEntries)
                                                    .Reverse()
                                                    .Skip(1)
                                                    .Reverse()
                                                    .ToArray()) + ".";
        }
        gptResponse.text = response;

        messages.RemoveAt(messages.Count - 1);
        messages.Add(gptResponse);
        gptIsThinking = false;
        await jsInProcess.InvokeVoidAsync("onResponseScrollToBottom").ConfigureAwait(false);
    }
}