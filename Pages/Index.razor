@page "/"

@using System.Runtime.InteropServices
@using Microsoft.JSInterop
@using System.Text
@using BlazorTypewriter

@inject IJSRuntime JS

<PageTitle>MLNet.github.io</PageTitle>

<MudGrid Class="mt-2" Justify="Justify.Center">
    <MudItem>
        <MudPaper Class="d-flex pa-4 flex-column flex-grow-1 gap-4" Height="80vh" Width="40vw">
            <MudPaper Class="d-flex flex-column flex-grow-1 gap-4 overflow-y-scroll" Height="85%" Width="100%" Elevation="0" Outlined="false">
                @for(Int32 i = 0; i < messages.Count; i++)
                {
                    Message message = messages[i];
                    if(message.from == "user")
                    {
                        <MudPaper Class="pa-4">
                            <MudText Typo="Typo.body1">@message.text</MudText>
                        </MudPaper>
                    }
                    else
                    {
                        if(message.text is null)
                        {
                            <MudPaper Class="pa-4">
                                <MudText Typo="Typo.body1">
                                    <Typewriter Builder="@gptIsThinkingMessage" />
                                </MudText>
                            </MudPaper>
                        }
                        else
                        {
                            if(i == messages.Count - 1)
                            {
                                <MudPaper Class="pa-4">
                                    <MudText Typo="Typo.body1">
                                        <Typewriter Builder="@(new TypewriterBuilder(defaultCharacterPause: 6).TypeString(message.text))" />
                                    </MudText>
                                </MudPaper>
                            }
                            else
                            {
                                <MudPaper Class="pa-4">
                                    <MudText Typo="Typo.body1">
                                        @message.text
                                    </MudText>
                                </MudPaper>
                            }
                        }
                    }
                }
            </MudPaper>
            <MudTextField @bind-Value="input" Disabled="@(!modelIsLinked || gptIsThinking)" Class="align-self-end" FullWidth="true" T="string" Label="Enter your prompt" Variant="Variant.Outlined" Lines="3" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Send" OnAdornmentClick="@(() => EnterPrompt())" />
        </MudPaper>
    </MudItem>
</MudGrid>

<InputFile OnChange="@LoadFiles" />

@code {
    private struct Message
    {
        public String from;
        public String? text;
    }

    [DllImport("main", CallingConvention = CallingConvention.Cdecl)]
    static extern void gpt2_gen_text(string prompt, StringBuilder sb, int len);

    private Boolean modelIsLinked = false;

    private Boolean gptIsThinking = false;

    private String input { get; set; }

    private Byte[] bytes { get; set; }

    private List<Message> messages = new();

    private TypewriterBuilder gptIsThinkingMessage = new TypewriterBuilder(defaultCharacterPause: 6)
        .TypeString("GPT is thinking...", 30);

    private async Task PeriodicAsync(Func<Task> action, TimeSpan interval,
    CancellationToken cancellationToken = default)
    {
        using PeriodicTimer timer = new(interval);
        while (true)
        {
            await action();
            await timer.WaitForNextTickAsync(cancellationToken);
        }
    }

    private async Task EnterPrompt()
    {
        gptIsThinking = true;

        Message prompt = new();
        prompt.from = "user";
        prompt.text = input;
        messages.Add(prompt);
        input = "";
        StateHasChanged();
        await Task.Delay(1000);

        Message gptWaitingMessage = new();
        gptWaitingMessage.from = "gpt";
        gptWaitingMessage.text = null;
        messages.Add(gptWaitingMessage);
        StateHasChanged();
        await Task.Delay(1000);

        Int32 len = 1000;
        StringBuilder sb = new StringBuilder(len);
        await Task.Run(() => gpt2_gen_text(prompt.text, sb, len));
        Message gptResponse = new();
        gptResponse.from = "gpt";
        gptResponse.text = sb.ToString();

        messages.RemoveAt(messages.Count - 1);
        StateHasChanged();

        messages.Add(gptResponse);
        gptIsThinking = false;
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        var buffer = new byte[e.File.Size];
        await Task.Delay(1);
        await e.File.OpenReadStream(Int64.MaxValue).ReadAsync(buffer);
        bytes = buffer;

        var jsInProcess = (IJSInProcessRuntime)JS;
        try
        {
            await jsInProcess.InvokeVoidAsync("Module.FS_unlink", "gpt-2.bin");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

        try
        {
            await jsInProcess.InvokeVoidAsync("Module.FS_createDataFile", "/", "gpt-2.bin", bytes, true, true);
            modelIsLinked = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}