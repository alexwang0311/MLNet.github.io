@page "/"

@using System.Runtime.InteropServices
@using MLNetOnGithub.Components.Chat
@using Microsoft.JSInterop
@using System.Text

@inject IJSRuntime JS

<PageTitle>MLNet.github.io</PageTitle>

<InputFile OnChange="@LoadFiles" />

<h3>@text</h3>

<InputText @bind-Value="input"></InputText>

<button @onclick="Generate" disabled="@(!modelIsLinked)">generate</button>

@code {
    [DllImport("main", CallingConvention = CallingConvention.Cdecl)]
    static extern void gpt2_gen_text(string prompt, StringBuilder sb, int len);

    private Boolean modelIsLinked = false;

    private String text = "nothing yet";

    private String input { get; set; }

    private Byte[] bytes { get; set; }

    protected async Task Generate()
    {
        text = "started";
        await Task.Delay(1);
        try
        {
            Int32 len = 1000;
            StringBuilder sb = new StringBuilder(len);
            await Task.Delay(1);
            await Task.Run(() => gpt2_gen_text(input, sb, len)).ConfigureAwait(false);
            text = sb.ToString();
        }
        catch(Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        var buffer = new byte[e.File.Size];
        await Task.Delay(1);
        await e.File.OpenReadStream(Int64.MaxValue).ReadAsync(buffer);
        bytes = buffer;

        var jsInProcess = (IJSInProcessRuntime)JS;
        try
        {
            await jsInProcess.InvokeVoidAsync("Module.FS_unlink", "gpt-2.bin");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

        try
        {
            await jsInProcess.InvokeVoidAsync("Module.FS_createDataFile", "/", "gpt-2.bin", bytes, true, true);
            modelIsLinked = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}